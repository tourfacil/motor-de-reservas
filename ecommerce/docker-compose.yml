# v2 syntax
version: '2'

# Named volumes
volumes:
  # MySQL Data
  app-mysql-data:
    driver: local

  # Redis Data
  app-redis-data:
    driver: local

services:

  # MySQL (latest)
  mysql:
    image: mysql:5.7
    container_name: ${APP_NAME}_mysql
    volumes:
      - app-mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_ROOT_HOST=%
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}

  # Redis
  redis:
    image: redis:alpine
    container_name: ${APP_NAME}_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - app-redis-data:/data
    ports:
      - "6379:6379"

  # Server app
  php:
    container_name: ${APP_NAME}_php
    build:
      context: ./
      dockerfile: ./docker/app/Dockerfile
    volumes:
      - ./:/var/www/app
      - ./docker/app/supervisord.conf:/etc/supervisor/supervisord.conf
      - ./docker/app/docker-php-config.ini:/usr/local/etc/php/conf.d/docker-php-config.ini
    links:
      - mysql
      - redis
      - web
    environment:
      - DB_PORT=${DB_PORT}
      - DB_HOST=${DB_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "9000:9000"

  # Nginx
  web:
    container_name: ${APP_NAME}_web
    build:
      context: ./
      dockerfile: ./docker/web/Dockerfile
    working_dir: /var/www/app
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    environment:
      - API_KEY=${AMPLIFY_API_KEY}
      - AMPLIFY_IMAGENAME=${AMPLIFY_IMAGENAME}
    volumes:
      - ./:/var/www/app
      - ./docker/web/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/web/options-ssl-nginx.conf:/etc/nginx/options-ssl-nginx.conf
      - ./docker/web/ssl-dhparams.pem:/etc/nginx/ssl-dhparams.pem
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"

  # Let's encrypt certbot
  certbot:
    container_name: ${APP_NAME}_certbot
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
